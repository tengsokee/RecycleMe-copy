"""socialMedia models.py

This script defines the entities required for social Media functionality

Author: Akshita, Sok Ee and Desmond

This file can also be imported as a module and contains the following
classes:

    * ProfileManager - defines the functions for interacting with Profile
    * Profile - defines the model profile containing user information
    * PostManager - Manages posts created and its associated functionalities
    * Post - Post is user generated content
    * Image - Images added by user
    * CommentManager - Manages comment generated by users
    * Comment - User reply to a post
"""

from django.db import models
from django import forms
import os
from django.conf import settings
from django.contrib.auth.models import User
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.utils import timezone
from autoslug import AutoSlugField

character_limit = 255
email_len = 254
name_character_limit = 100
photo_url_len_limit = 300
# Create your models here.

class ProfileManager(models.Model):
    """Manages user and its functionalities
    """

    def get_user(self, user_id):
        """Finds a specific user based on user id
        Parameters
        ----------
        user_id : int
            Unique id of user

        Returns
        -------
        Queryset
            All stored information on the user.
        """
        user = self.filter(user=user_id)
        return user


class Profile(models.Model):
    """Profile stores the personal details of an account
    """
    user = models.OneToOneField(User, primary_key=True, verbose_name='user', related_name='profile',
                                on_delete=models.CASCADE)
    name = models.CharField(max_length=name_character_limit)
    image = models.ImageField(upload_to='media/profile_pics', blank=False, default="profile_pics/default.png")
    bio = models.CharField(max_length=255, blank=True)
    email = models.EmailField(max_length=email_len)
    objects = ProfileManager()



    def __str__(self):
        return str(self.user)

    def get_absolute_url(self):
        return "/socialMedia/{}".format(self.user)


def post_save_user_model_receiver(sender, instance, created, *args, **kwargs):
    if created:
        try:
            Profile.objects.create(user=instance)
        except:
            pass


post_save.connect(post_save_user_model_receiver, sender=settings.AUTH_USER_MODEL)


class PostManager(models.Manager):
    """Manages posts created and its associated functionalities
    """

    def create_post(self, author_id, content):
        """Creates a post

        Parameters
        ----------
        author_id : int
            Unique id of user
        content : str
            User entered text

        Returns
        -------
        Post
            A post object
        """
        post = self.create(author=Profile.objects.get(id=author_id), content=content)
        post.save()
        return post

    def report_post(self, author_id, content):
        """
        """
    # eg to call a method in a manager: Comment.objects.create_comment("Pride and Prejudice")
    # refer to https://docs.djangoproject.com/en/3.1/ref/models/instances/


class Post(models.Model):
    """Post is user generated content
    """
    id = models.AutoField(primary_key=True)
    name = models.CharField(max_length=name_character_limit)
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='post_author')
    content = models.TextField(max_length=255)
    pub_date = models.DateTimeField(auto_now=True)
    likes = models.ManyToManyField(User, blank=True, related_name='likes')
    dislikes = models.ManyToManyField(User, blank=True, related_name='dislikes')
    bookmark = models.ManyToManyField(User, related_name='bookmark', blank=True)

    objects = PostManager()

    def __str__(self):
        return str(self.id)



class Image(models.Model):
    """Images added by user
    """
    id = models.AutoField(primary_key=True)
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='photo_adder')
    image = models.ImageField(upload_to='media/post_pics')
    pub_date = models.DateTimeField(auto_now=True)

    def __str__(self):
        return str(self.id)


class CommentManager(models.Manager):
    """Manages comment generated by users
    """

    def create_comment(self, post_id, author_id, content):
        """Creates a comment

        Parameters
        ----------
        post_id : int
            Unique id of post being replied to
        author_id : int
            Unique id of user
        content : str
            The reply to the post

        Returns
        -------
        Comment
            A comment object
        """
        comment = self.create(post=Post.objects.get(id=post_id), author=Profile.objects.get(id=author_id),
                              content=content)
        comment.save()
        return comment

    def get_comments(self, post_id):
        """get all comments for a specific post

        Parameters
        ----------
        post_id : int
            Unique id of post being replied to

        Returns
        -------
        QuerySet
            A query set of comments is returned
        """
        comments = self.filter(post=Post.objects.get(id=post_id))
        return comments


class Comment(models.Model):
    """User reply to a post
    """
    id = models.AutoField(primary_key=True)
    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comment_post')
    author = models.ForeignKey(User, on_delete=models.CASCADE, related_name='comment_author')
    content = models.TextField(max_length=255)
    pub_date = models.DateTimeField(auto_now=True)
    objects = CommentManager()

    def __str__(self):
        return str(self.id)
